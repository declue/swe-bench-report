diff --git a/django__django__3.0/contrib/auth/validators.py b/django__django__3.0/contrib/auth/validators.py
new file mode 100644
index 0000000000..d66e12231c
--- /dev/null
+++ b/django__django__3.0/contrib/auth/validators.py
@@ -0,0 +1,36 @@
+import re
+from django.core.exceptions import ValidationError
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+class ASCIIUsernameValidator:
+    regex = r'^[\w.@+-]+$'
+
+    def __call__(self, value):
+        if not re.match(self.regex, value) or re.search(r'\n|\r', value):
+            raise ValidationError('Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')
+
+class UnicodeUsernameValidator:
+    regex = r'^[\w.@+-]+$'
+
+    def __call__(self, value):
+        if not re.match(self.regex, value) or re.search(r'\n|\r', value):
+            raise ValidationError('Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')
+
+def test_invalid_username():
+    invalid_usernames = [
+        "testuser\n",  # newline character at the end
+        "testuser\r",  # carriage return at the end (not handled by current validators)
+        "testuser ",   # trailing space (not handled by current validators)
+    ]
+    
+    for username in invalid_usernames:
+        try:
+            ASCIIUsernameValidator()(username)
+            UnicodeUsernameValidator()(username)
+        except ValidationError as e:
+            print(f"Validation failed for '{username}': {e}")
+        else:
+            print(f"Unexpected success for invalid username '{username}'")
+
+test_invalid_username()
+
