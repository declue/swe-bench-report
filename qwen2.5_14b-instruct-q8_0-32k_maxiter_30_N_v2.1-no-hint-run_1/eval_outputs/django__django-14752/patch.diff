diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..9212d06101 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -3,32 +3,28 @@ from django.core.exceptions import FieldDoesNotExist, PermissionDenied
 from django.http import Http404, JsonResponse
 from django.views.generic.list import BaseListView
 
-
 class AutocompleteJsonView(BaseListView):
     """Handle AutocompleteWidget's AJAX requests for data."""
     paginate_by = 20
     admin_site = None
 
+    def serialize_result(self, obj, to_field_name):
+        result = {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+        return result
+
     def get(self, request, *args, **kwargs):
-        """
-        Return a JsonResponse with search results of the form:
-        {
-            results: [{id: "123" text: "foo"}],
-            pagination: {more: true}
-        }
-        """
         self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)
-
         if not self.has_perm(request):
             raise PermissionDenied
-
         self.object_list = self.get_queryset()
         context = self.get_context_data()
+
+        results = [
+            self.serialize_result(obj, to_field_name) for obj in context['object_list']
+        ]
+
         return JsonResponse({
-            'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
-                for obj in context['object_list']
-            ],
+            'results': results,
             'pagination': {'more': context['page_obj'].has_next()},
         })
 
@@ -100,3 +96,4 @@ class AutocompleteJsonView(BaseListView):
     def has_perm(self, request, obj=None):
         """Check if user has permission to access the related model."""
         return self.model_admin.has_view_permission(request, obj=obj)
+
