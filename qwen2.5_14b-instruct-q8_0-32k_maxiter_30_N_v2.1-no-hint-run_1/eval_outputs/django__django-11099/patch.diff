diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..fe245612dc 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -5,9 +5,10 @@ from django.utils.deconstruct import deconstructible
 from django.utils.translation import gettext_lazy as _
 
 
+@deconstructible
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,9 +18,11 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
     )
     flags = 0
+
+
diff --git a/django_test_project/django_test_project/__init__.py b/django_test_project/django_test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django_test_project/django_test_project/reproduce_error_django.py b/django_test_project/django_test_project/reproduce_error_django.py
new file mode 100644
index 0000000000..169012b79a
--- /dev/null
+++ b/django_test_project/django_test_project/reproduce_error_django.py
@@ -0,0 +1,30 @@
+import os
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+from django.conf import settings
+from django.core.management import call_command
+from django.test.utils import setup_test_environment, teardown_test_environment
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+# Initialize Django test environment
+setup_test_environment()
+call_command('migrate')
+
+# Test data: A username ending with a newline character
+username_with_newline = "testuser\n"
+
+ascii_validator = ASCIIUsernameValidator()
+unicode_validator = UnicodeUsernameValidator()
+
+try:
+    ascii_validator(username_with_newline)
+except Exception as e:
+    print("ASCIIUsernameValidator failed with error:", str(e))
+
+try:
+    unicode_validator(username_with_newline)
+except Exception as e:
+    print("UnicodeUsernameValidator failed with error:", str(e))
+
+# Clean up Django test environment
+teardown_test_environment()
diff --git a/django_test_project/django_test_project/settings.py b/django_test_project/django_test_project/settings.py
new file mode 100644
index 0000000000..4a6b0e37b0
--- /dev/null
+++ b/django_test_project/django_test_project/settings.py
@@ -0,0 +1,70 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+SECRET_KEY = 'notasecret'
+
+INSTALLED_APPS = [
+    'django.contrib.auth',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+# Required for Django to run
+ROOT_URLCONF = 'urls'
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+# Required for Django to run
+WSGI_APPLICATION = 'wsgi.application'
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+# Required for Django to run
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+# Additional settings required by the validators
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
diff --git a/django_test_project/django_test_project/urls.py b/django_test_project/django_test_project/urls.py
new file mode 100644
index 0000000000..c35c934971
--- /dev/null
+++ b/django_test_project/django_test_project/urls.py
@@ -0,0 +1,21 @@
+"""django_test_project URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/django_test_project/django_test_project/wsgi.py b/django_test_project/django_test_project/wsgi.py
new file mode 100644
index 0000000000..4291d1456d
--- /dev/null
+++ b/django_test_project/django_test_project/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for django_test_project project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_test_project.settings')
+
+application = get_wsgi_application()
diff --git a/django_test_project/manage.py b/django_test_project/manage.py
new file mode 100755
index 0000000000..0a927e273f
--- /dev/null
+++ b/django_test_project/manage.py
@@ -0,0 +1,21 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
