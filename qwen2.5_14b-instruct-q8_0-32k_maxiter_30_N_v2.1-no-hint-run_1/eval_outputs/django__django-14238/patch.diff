diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..d2c4e6241b 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2498,7 +2498,6 @@ class AutoFieldMixin:
     def formfield(self, **kwargs):
         return None
 
-
 class AutoFieldMeta(type):
     """
     Metaclass to maintain backward inheritance compatibility for AutoField.
@@ -2518,17 +2517,36 @@ class AutoFieldMeta(type):
 
     @property
     def _subclasses(self):
-        return (BigAutoField, SmallAutoField)
+        if not hasattr(self, '_subclasses_cache'):
+            self._subclasses_cache = set()
+            # Add BigAutoField and SmallAutoField to the subclasses cache
+            from . import BigAutoField, SmallAutoField
+
+            for cls in [BigAutoField, SmallAutoField]:
+                if issubclass(cls, IntegerField):
+                    self._subclasses_cache.add(cls.__name__)
+        return self._subclasses_cache
 
     def __instancecheck__(self, instance):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
-    def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+    def __subclasscheck__(cls, subclass):
+        if cls is AutoField:
+            return (
+                # Check for subclasses of IntegerField that are also a subclass of AutoField.
+                isinstance(subclass, type) and issubclass(subclass, IntegerField)
+                or
+                # Add the following lines to include BigAutoField and SmallAutoField in the _subclasses property
+                (cls._subclasses is not None
+                 and subclass.__name__ in cls._subclasses
+                 and (issubclass(subclass, BigAutoField) or issubclass(subclass, SmallAutoField)))
+            )
+        return super().__subclasscheck__(subclass)
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
 
+
     def get_internal_type(self):
         return 'AutoField'
 
@@ -2552,3 +2570,4 @@ class SmallAutoField(AutoFieldMixin, SmallIntegerField):
 
     def rel_db_type(self, connection):
         return SmallIntegerField().db_type(connection=connection)
+
diff --git a/example/core/management/commands/test_default_auto_field.py b/example/core/management/commands/test_default_auto_field.py
new file mode 100644
index 0000000000..1d0ee816a7
--- /dev/null
+++ b/example/core/management/commands/test_default_auto_field.py
@@ -0,0 +1,13 @@
+from django.core.management.base import BaseCommand
+from example.core.models import MyModel
+
+class Command(BaseCommand):
+    help = 'Test DEFAULT_AUTO_FIELD configuration'
+
+    def handle(self, *args, **options):
+        # This should trigger the issue when trying to use MyModel
+        class TestModel(MyModel):
+            pass
+        
+        print("Setup complete, error should have occurred above.")
+
diff --git a/example/core/models/__init__.py b/example/core/models/__init__.py
new file mode 100644
index 0000000000..3e93c9e538
--- /dev/null
+++ b/example/core/models/__init__.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+
+class MyModel(models.Model):
+    pass
diff --git a/example/core/urls.py b/example/core/urls.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/example/settings.py b/example/settings.py
new file mode 100644
index 0000000000..b0a6991d31
--- /dev/null
+++ b/example/settings.py
@@ -0,0 +1,72 @@
+# Django settings for example project.
+from pathlib import Path
+
+BASE_DIR = Path(__file__).resolve().parent.parent
+SECRET_KEY = 'your_secret_key_here'
+DEBUG = True
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'example.core',  # Add the app here.
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'example.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'example.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
+    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
+]
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
+
+DEFAULT_AUTO_FIELD = 'example.core.models.MyBigAutoField'  # Set DEFAULT_AUTO_FIELD here.
+
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..e3fc27c96d
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "example.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..05c0955ae3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,12 @@
+from django.conf import settings
+from django.db import models
+
+settings.configure(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')
+
+# This should trigger the issue when trying to use MyModel
+class MyModel(models.Model):
+    pass
+
+if __name__ == '__main__':
+    print("Setup complete, error should have occurred above.")
+
diff --git a/test_default_auto_field.py b/test_default_auto_field.py
new file mode 100644
index 0000000000..05c0955ae3
--- /dev/null
+++ b/test_default_auto_field.py
@@ -0,0 +1,12 @@
+from django.conf import settings
+from django.db import models
+
+settings.configure(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')
+
+# This should trigger the issue when trying to use MyModel
+class MyModel(models.Model):
+    pass
+
+if __name__ == '__main__':
+    print("Setup complete, error should have occurred above.")
+
diff --git a/test_default_auto_field_simplified.py b/test_default_auto_field_simplified.py
new file mode 100644
index 0000000000..004599a0ff
--- /dev/null
+++ b/test_default_auto_field_simplified.py
@@ -0,0 +1,14 @@
+import django
+
+from django.conf import settings
+settings.configure(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')
+django.setup()
+
+from example.core.models import MyModel
+
+# This should trigger the issue when trying to use MyModel
+class TestModel(MyModel):
+    pass
+
+print("Setup complete, error should have occurred above.")
+
