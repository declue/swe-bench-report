diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..a4c4020bb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,13 @@
+from sklearn import svm
+from sklearn.datasets import samples_generator
+from sklearn.feature_selection import SelectKBest, f_regression
+from sklearn.pipeline import Pipeline
+
+# generate some data to play with
+X, y = samples_generator.make_classification(n_informative=5, n_redundant=0, random_state=42)
+
+anova_filter = SelectKBest(f_regression, k=5)
+clf = svm.SVC(kernel='linear')
+pipe = Pipeline([('anova', anova_filter), ('svc', clf)])
+
+len(pipe)
diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py
index 7eaf9a46f..39201cc67 100644
--- a/sklearn/pipeline.py
+++ b/sklearn/pipeline.py
@@ -405,6 +405,36 @@ class Pipeline(_BaseComposition):
         Xt, fit_params = self._fit(X, y, **fit_params)
         return self.steps[-1][-1].fit_predict(Xt, y, **fit_params)
 
+    @if_delegate_has_method(delegate='_final_estimator')
+    def fit_predict(self, X, y=None, **fit_params):
+        """Applies fit_predict of last step in pipeline after transforms.
+
+        Parameters
+        ----------
+        X : iterable
+            Training data. Must fulfill input requirements of first step of the
+            pipeline.
+        y : iterable or None, default=None
+            Training targets. Must fulfill label requirements for all steps of
+            the pipeline.
+        **fit_params : dict of string -> object
+            Parameters passed to the ``fit`` method of each step, where
+            each parameter name is prefixed such that parameter ``p`` for step
+            ``s`` with ``n`` steps in total is named ``s__p``.
+
+        Returns
+        -------
+        y_pred : ndarray
+            Result of calling `fit_predict` on the final estimator.
+        """
+        Xt, fit_params = self._fit(X, y, **fit_params)
+        return self.steps[-1][-1].fit_predict(Xt, y, **fit_params)
+
+    def __len__(self):
+        """Get number of steps in the pipeline"""
+        return len(self.steps)
+
+
     @if_delegate_has_method(delegate='_final_estimator')
     def predict_proba(self, X):
         """Apply transforms, and predict_proba of the final estimator
@@ -929,3 +959,4 @@ def make_union(*transformers, **kwargs):
         raise TypeError('Unknown keyword arguments: "{}"'
                         .format(list(kwargs.keys())[0]))
     return FeatureUnion(_name_estimators(transformers), n_jobs=n_jobs)
+
