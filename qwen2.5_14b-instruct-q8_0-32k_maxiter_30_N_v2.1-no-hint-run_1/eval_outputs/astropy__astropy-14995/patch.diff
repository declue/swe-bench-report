diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..fd52bb1953 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -473,6 +473,15 @@ class NDArithmeticMixin:
             operand.uncertainty = None
             return result_uncert
 
+        elif operand is not None and operand.uncertainty is None:
+            # As with self.uncertainty is None but the other way around.
+            operand.uncertainty = self.uncertainty.__class__(None)
+            result_uncert = self.uncertainty.propagate(
+                operation, operand, result, correlation
+            )
+            operand.uncertainty = None
+            return result_uncert
+
         else:
             # Both have uncertainties so just propagate.
 
@@ -482,6 +491,108 @@ class NDArithmeticMixin:
                 operation, operand, result, correlation, **axis_kwarg
             )
 
+    def multiply(self, operand, operand2=None, **kwargs):
+        """
+        Performs multiplication by evaluating ``self`` * ``operand``.
+
+        Parameters
+        ----------
+        operand, operand2 : `NDData`-like instance
+            If ``operand2`` is ``None`` or not given it will perform the operation
+            ``self`` * ``operand``.
+            If ``operand2`` is given it will perform ``operand`` * ``operand2``.
+            If the method was called on a class rather than on the instance
+            ``operand2`` must be given.
+
+        propagate_uncertainties : `bool` or ``None``, optional
+            If ``None`` the result will have no uncertainty. If ``False`` the
+            result will have a copied version of the first operand that has an
+            uncertainty. If ``True`` the result will have a correctly propagated
+            uncertainty from the uncertainties of the operands but this assumes
+            that the uncertainties are `NDUncertainty`-like. Default is ``True``.
+
+        handle_mask : callable, ``'first_found'`` or ``None``, optional
+            If ``None`` the result will have no mask. If ``'first_found'`` the
+            result will have a copied version of the first operand that has a
+            mask. If it is a callable then the specified callable must
+            create the results ``mask`` and if necessary provide a copy.
+            Default is `numpy.logical_or`.
+
+        handle_meta : callable, ``'first_found'`` or ``None``, optional
+            If ``None`` the result will have no meta. If ``'first_found'`` the
+            result will have a copied version of the first operand that has a
+            (not empty) meta. If it is a callable then the specified callable must
+            create the results ``meta`` and if necessary provide a copy.
+            Default is ``None``.
+
+        compare_wcs : callable, ``'first_found'`` or ``None``, optional
+            If ``None`` the result will have no wcs and no comparison between
+            the wcs of the operands is made. If ``'first_found'`` the
+            result will have a copied version of the first operand that has a
+            wcs. If it is a callable then the specified callable must
+            compare the ``wcs``. The resulting ``wcs`` will be like if ``False``
+            was given otherwise it raises a ``ValueError`` if the comparison was
+            not successful. Default is ``'first_found'``.
+
+        uncertainty_correlation : number or `~numpy.ndarray`, optional
+            The correlation between the two operands is used for correct error
+            propagation for correlated data as given in:
+            https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas
+            Default is 0.
+
+        kwargs :
+            Any other parameter that should be passed to the callables used.
+
+        Returns
+        -------
+        result : `~astropy.nddata.NDData`-like
+            The resulting dataset
+
+        Notes
+        -----
+        If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the
+        callable must accept the corresponding attributes as first two
+        parameters. If the callable also needs additional parameters these can be
+        defined as ``kwargs`` and must start with ``"wcs_"`` (for wcs callable) or
+        ``"meta_"`` (for meta callable). This startstring is removed before the
+        callable is called.
+
+        ``"first_found"`` can also be abbreviated with ``"ff"``.
+        """
+        # Perform the multiplication operation on data
+        result_data = self.data * (operand.data if operand2 is None else operand2.data)
+
+        # Handle uncertainties if present
+        propagate_uncertainties = kwargs.get('propagate_uncertainties', True)
+        if propagate_uncertainties:
+            uncertainty_correlation = kwargs.get('uncertainty_correlation', 0)
+            result_uncertainty = self.uncertainty * (operand.uncertainty if operand2 is None else operand2.uncertainty) * np.sqrt(1 + uncertainty_correlation**2)
+
+        # Handle masks
+        handle_mask = kwargs.get('handle_mask', np.logical_or)
+        
+        # Ensure that if any operand's mask is None, it is treated as an array of False values for bitwise operations
+        self_mask = np.zeros_like(self.data, dtype=bool) if self.mask is None else self.mask
+        operand_mask = np.zeros_like(operand.data, dtype=bool) if hasattr(operand, 'mask') and operand.mask is None else operand.mask
+        
+        result_mask = handle_mask(self_mask, operand_mask)
+
+        # Handle meta and wcs (if present)
+        handle_meta = kwargs.get('handle_meta')
+        if handle_meta is not None:
+            result_meta = handle_meta(self.meta, operand.meta) if operand2 is None else handle_meta(operand.meta, operand2.meta)
+        else:
+            result_meta = {}
+
+        compare_wcs = kwargs.get('compare_wcs', 'first_found')
+        if compare_wcs == 'first_found':
+            result_wcs = self.wcs if hasattr(self, 'wcs') and self.wcs is not None else (operand.wcs if operand2 is None else operand2.wcs)
+        elif callable(compare_wcs):
+            result_wcs = compare_wcs(self.wcs, operand.wcs) if operand2 is None else compare_wcs(operand.wcs, operand2.wcs)
+
+        # Create the resulting NDData object
+        return self.__class__(result_data, uncertainty=result_uncertainty, mask=result_mask, meta=result_meta, wcs=result_wcs)
+
     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):
         """
         Calculate the resulting mask.
@@ -489,6 +600,7 @@ class NDArithmeticMixin:
         This is implemented as the piecewise ``or`` operation if both have a
         mask.
 
+
         Parameters
         ----------
         operation : callable
@@ -496,7 +608,10 @@ class NDArithmeticMixin:
             By default, the ``operation`` will be ignored.
 
         operand : `NDData`-like instance
+
+
             The second operand wrapped in an instance of the same class as
+
             self.
 
         handle_mask : callable
@@ -508,6 +623,7 @@ class NDArithmeticMixin:
         Returns
         -------
         result_mask : any type
+
             If only one mask was present this mask is returned.
             If neither had a mask ``None`` is returned. Otherwise
             ``handle_mask`` must create (and copy) the returned mask.
@@ -748,3 +864,11 @@ class NDArithmeticMixin:
 
         # Return a new class based on the result
         return cls(result, **init_kwds)
+
+
+
+
+
+
+
+
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..96c4381002
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+# multiply no mask by constant (no mask * no mask)
+print(nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask) # returns nothing, no mask, OK
+
+# multiply no mask by itself (no mask * no mask)
+print(nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask) # return nothing, no mask, OK
+
+# multiply mask by constant (mask * no mask)
+try:
+    print(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)
+except Exception as e:
+    print(e)
+
+# multiply mask by itself (mask * mask)
+print(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask)
+
+# multiply mask by no mask (mask * no mask)
+try:
+    print(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)
+except Exception as e:
+    print(e)
