+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/http/response.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_django/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 879cc3da6249e920b8d54518a0ae06de835d7373
Author: Tim Graham <timograham@gmail.com>
Date:   Thu Mar 28 20:47:51 2019 -0400

    Moved extlinks in docs config to allow using 'version' variable.
    
    After a stable branch is created, 'master' will change to
    'stable/' + version + '.x'.

diff --git a/docs/conf.py b/docs/conf.py
index 625c383965..b51c8c03e2 100644
--- a/docs/conf.py
+++ b/docs/conf.py
@@ -43,14 +43,6 @@ extensions = [
     "sphinx.ext.viewcode",
 ]
 
-extlinks = {
-    'commit': ('https://github.com/django/django/commit/%s', ''),
-    'cve': ('https://nvd.nist.gov/view/vuln/detail?vulnId=%s', 'CVE-'),
-    # A file or directory. GitHub redirects from blob to tree if needed.
-    'source': ('https://github.com/django/django/blob/master/%s', ''),
-    'ticket': ('https://code.djangoproject.com/ticket/%s', '#'),
-}
-
 # Spelling check needs an additional module that is not installed by default.
 # Add it only if spelling check is requested so docs can be generated without it.
 if 'spelling' in sys.argv:
@@ -102,6 +94,14 @@ else:
 # The "development version" of Django
 django_next_version = '3.0'
 
+extlinks = {
+    'commit': ('https://github.com/django/django/commit/%s', ''),
+    'cve': ('https://nvd.nist.gov/view/vuln/detail?vulnId=%s', 'CVE-'),
+    # A file or directory. GitHub redirects from blob to tree if needed.
+    'source': ('https://github.com/django/django/blob/master/%s', ''),
+    'ticket': ('https://code.djangoproject.com/ticket/%s', '#'),
+}
+
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.
 # language = None
diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt
index 0eb5bed1fc..9a7de08941 100644
--- a/docs/ref/settings.txt
+++ b/docs/ref/settings.txt
@@ -1839,11 +1839,7 @@ Here's a sample settings file::
 
 Default: A list of all language codes from the :setting:`LANGUAGES` setting
 that are written right-to-left. You can see the current list of these languages
-by looking in ``django/conf/global_settings.py`` (or view the `online
-source`_).
-
-.. _online source: https://github.com/django/django/blob/master/django/conf/global_settings.py
-
+by looking in :source:`django/conf/global_settings.py`.
 
 The list contains :term:`language codes<language code>` for languages that are
 written right-to-left.
+ git diff 879cc3da6249e920b8d54518a0ae06de835d7373
diff --git a/django/http/response.py b/django/http/response.py
index 6a84e193ba..fdd45b2ded 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -284,10 +284,11 @@ class HttpResponse(HttpResponseBase):
 
     streaming = False
 
+class HttpResponse(HttpResponseBase):
     def __init__(self, content=b'', *args, **kwargs):
-        super().__init__(*args, **kwargs)
-        # Content is a bytestring. See the `content` property methods.
-        self.content = content
+        if isinstance(content, memoryview):
+            content = content.tobytes()
+        super().__init__(*args, content=content, **kwargs)
 
     def __repr__(self):
         return '<%(cls)s status_code=%(status_code)d%(content_type)s>' % {
@@ -556,3 +557,8 @@ class JsonResponse(HttpResponse):
         kwargs.setdefault('content_type', 'application/json')
         data = json.dumps(data, cls=encoder, **json_dumps_params)
         super().__init__(content=data, **kwargs)
+
+
+
+
+
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190329004751) (2024.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190329004751) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190329004751
    Uninstalling Django-3.0.dev20190329004751:
      Successfully uninstalled Django-3.0.dev20190329004751
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190329004751
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 879cc3da6249e920b8d54518a0ae06de835d7373 tests/httpwrappers/tests.py
Updated 0 paths from 6e92992b42
+ git apply -v -
Checking patch tests/httpwrappers/tests.py...
Applied patch tests/httpwrappers/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 httpwrappers.tests
test_response (httpwrappers.tests.FileCloseTests) ... ERROR
test_streaming_response (httpwrappers.tests.FileCloseTests) ... ok
test_invalid_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_not_allowed (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_not_allowed_repr (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_not_allowed_repr_no_content_type (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_not_modified (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_not_modified_repr (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_redirect (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_redirect_lazy (httpwrappers.tests.HttpResponseSubclassesTests)
Make sure HttpResponseRedirect works with lazy strings. ... ERROR
test_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests) ... ERROR
test_json_response_custom_encoder (httpwrappers.tests.JsonResponseTests) ... ERROR
test_json_response_list (httpwrappers.tests.JsonResponseTests) ... ERROR
test_json_response_non_ascii (httpwrappers.tests.JsonResponseTests) ... ERROR
test_json_response_passing_arguments_to_json_dumps (httpwrappers.tests.JsonResponseTests) ... ERROR
test_json_response_raises_type_error_with_default_setting (httpwrappers.tests.JsonResponseTests) ... ok
test_json_response_text (httpwrappers.tests.JsonResponseTests) ... ERROR
test_json_response_uuid (httpwrappers.tests.JsonResponseTests) ... ERROR
test_basic_mutable_operations (httpwrappers.tests.QueryDictTests) ... ok
test_create_with_no_args (httpwrappers.tests.QueryDictTests) ... ok
test_duplicates_in_fromkeys_iterable (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_empty_iterable (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_is_immutable_by_default (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_mutable_override (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_noniterable (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_with_nondefault_encoding (httpwrappers.tests.QueryDictTests) ... ok
test_fromkeys_with_nonempty_value (httpwrappers.tests.QueryDictTests) ... ok
test_immutability (httpwrappers.tests.QueryDictTests) ... ok
test_immutable_basic_operations (httpwrappers.tests.QueryDictTests) ... ok
test_immutable_get_with_default (httpwrappers.tests.QueryDictTests) ... ok
test_missing_key (httpwrappers.tests.QueryDictTests) ... ok
test_multiple_keys (httpwrappers.tests.QueryDictTests)
Test QueryDict with two key/value pairs with same keys. ... ok
test_mutable_copy (httpwrappers.tests.QueryDictTests)
A copy of a QueryDict is mutable. ... ok
test_mutable_delete (httpwrappers.tests.QueryDictTests) ... ok
test_non_default_encoding (httpwrappers.tests.QueryDictTests)
#13572 - QueryDict with a non-default encoding ... ok
test_pickle (httpwrappers.tests.QueryDictTests) ... ok
test_querydict_fromkeys (httpwrappers.tests.QueryDictTests) ... ok
test_single_key_value (httpwrappers.tests.QueryDictTests)
Test QueryDict with one key/value pair ... ok
test_update_from_querydict (httpwrappers.tests.QueryDictTests)
Regression test for #8278: QueryDict.update(QueryDict) ... ok
test_urlencode (httpwrappers.tests.QueryDictTests) ... ok
test_urlencode_int (httpwrappers.tests.QueryDictTests) ... ok
test_streaming_response (httpwrappers.tests.StreamingHttpResponseTests) ... ok
test_cookie_edgecases (httpwrappers.tests.CookieTests) ... ok
test_decode (httpwrappers.tests.CookieTests)
Semicolons and commas are decoded. ... ok
test_encode (httpwrappers.tests.CookieTests)
Semicolons and commas are encoded. ... ok
test_httponly_after_load (httpwrappers.tests.CookieTests) ... ok
test_invalid_cookies (httpwrappers.tests.CookieTests) ... ok
test_load_dict (httpwrappers.tests.CookieTests) ... ok
test_nonstandard_keys (httpwrappers.tests.CookieTests) ... ok
test_pickle (httpwrappers.tests.CookieTests) ... ok
test_python_cookies (httpwrappers.tests.CookieTests) ... ok
test_repeated_nonstandard_keys (httpwrappers.tests.CookieTests) ... ok
test_samesite (httpwrappers.tests.CookieTests) ... ok
test_dict_behavior (httpwrappers.tests.HttpResponseTests) ... ERROR
test_file_interface (httpwrappers.tests.HttpResponseTests) ... ERROR
test_headers_type (httpwrappers.tests.HttpResponseTests) ... ERROR
test_iter_content (httpwrappers.tests.HttpResponseTests) ... ERROR
test_iterator_isnt_rewound (httpwrappers.tests.HttpResponseTests) ... ERROR
test_lazy_content (httpwrappers.tests.HttpResponseTests) ... ERROR
test_long_line (httpwrappers.tests.HttpResponseTests) ... ERROR
test_memoryview_content (httpwrappers.tests.HttpResponseTests) ... ERROR
test_newlines_in_headers (httpwrappers.tests.HttpResponseTests) ... ERROR
test_non_string_content (httpwrappers.tests.HttpResponseTests) ... ERROR
test_stream_interface (httpwrappers.tests.HttpResponseTests) ... ERROR
test_unsafe_redirect (httpwrappers.tests.HttpResponseTests) ... ERROR

======================================================================
ERROR: test_response (httpwrappers.tests.FileCloseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 648, in test_response
    r = HttpResponse(file1)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_invalid_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 495, in test_invalid_redirect_repr
    HttpResponseRedirect.__init__(response, 'ssh://foo')
  File "/testbed/django/http/response.py", line 455, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_not_allowed (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 512, in test_not_allowed
    response = HttpResponseNotAllowed(['GET'])
  File "/testbed/django/http/response.py", line 510, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_not_allowed_repr (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 519, in test_not_allowed_repr
    response = HttpResponseNotAllowed(['GET', 'OPTIONS'], content_type='text/plain')
  File "/testbed/django/http/response.py", line 510, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_not_allowed_repr_no_content_type (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 524, in test_not_allowed_repr_no_content_type
    response = HttpResponseNotAllowed(('GET', 'POST'))
  File "/testbed/django/http/response.py", line 510, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_not_modified (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 500, in test_not_modified
    response = HttpResponseNotModified()
  File "/testbed/django/http/response.py", line 484, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_not_modified_repr (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 508, in test_not_modified_repr
    response = HttpResponseNotModified()
  File "/testbed/django/http/response.py", line 484, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_redirect (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 467, in test_redirect
    response = HttpResponseRedirect('/redirected/')
  File "/testbed/django/http/response.py", line 455, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_redirect_lazy (httpwrappers.tests.HttpResponseSubclassesTests)
Make sure HttpResponseRedirect works with lazy strings.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 480, in test_redirect_lazy
    r = HttpResponseRedirect(lazystr('/redirected/'))
  File "/testbed/django/http/response.py", line 455, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_redirect_repr (httpwrappers.tests.HttpResponseSubclassesTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 484, in test_redirect_repr
    response = HttpResponseRedirect('/redirected/')
  File "/testbed/django/http/response.py", line 455, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_custom_encoder (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 561, in test_json_response_custom_encoder
    response = JsonResponse({}, encoder=CustomDjangoJSONEncoder)
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_list (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 548, in test_json_response_list
    response = JsonResponse(['foo', 'bar'], safe=False)
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_non_ascii (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 532, in test_json_response_non_ascii
    response = JsonResponse(data)
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_passing_arguments_to_json_dumps (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 565, in test_json_response_passing_arguments_to_json_dumps
    response = JsonResponse({'foo': 'bar'}, json_dumps_params={'indent': 2})
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_text (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 544, in test_json_response_text
    response = JsonResponse('foobar', safe=False)
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_json_response_uuid (httpwrappers.tests.JsonResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 553, in test_json_response_uuid
    response = JsonResponse(u, safe=False)
  File "/testbed/django/http/response.py", line 559, in __init__
    super().__init__(content=data, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_dict_behavior (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 356, in test_dict_behavior
    r = HttpResponse()
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_file_interface (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 425, in test_file_interface
    r = HttpResponse()
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_headers_type (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 292, in test_headers_type
    r = HttpResponse()
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_iter_content (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 374, in test_iter_content
    r = HttpResponse(['abc', 'def', 'ghi'])
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_iterator_isnt_rewound (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 415, in test_iterator_isnt_rewound
    r = HttpResponse('abc')
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_lazy_content (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 421, in test_lazy_content
    r = HttpResponse(lazystr('helloworld'))
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_long_line (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 336, in test_long_line
    h = HttpResponse()
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_memoryview_content (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 370, in test_memoryview_content
    r = HttpResponse(memoryview(b'memoryview'))
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_newlines_in_headers (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 346, in test_newlines_in_headers
    r = HttpResponse()
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_non_string_content (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 361, in test_non_string_content
    r = HttpResponse(12345)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_stream_interface (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 444, in test_stream_interface
    r = HttpResponse('asdf')
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

======================================================================
ERROR: test_unsafe_redirect (httpwrappers.tests.HttpResponseTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/httpwrappers/tests.py", line 460, in test_unsafe_redirect
    HttpResponseRedirect(url)
  File "/testbed/django/http/response.py", line 455, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/http/response.py", line 291, in __init__
    super().__init__(*args, content=content, **kwargs)
TypeError: __init__() got an unexpected keyword argument 'content'

----------------------------------------------------------------------
Ran 65 tests in 0.010s

FAILED (errors=28)
Testing against Django installed in '/testbed/django'
Importing application httpwrappers
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
+ git checkout 879cc3da6249e920b8d54518a0ae06de835d7373 tests/httpwrappers/tests.py
Updated 1 path from 6e92992b42
