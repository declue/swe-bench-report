diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 8a1bd3625..f7a1cf6e5 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -508,3 +508,109 @@ def _average_path_length(n_samples_leaf):
     )
 
     return average_path_length.reshape(n_samples_leaf_shape)
+
+
+# Expose warm_start in IsolationForest
+from sklearn.base import BaseEstimator, ClassifierMixin
+
+class IsolationForest(BaseEstimator, ClassifierMixin):
+    def __init__(self,
+                 n_estimators=100,
+                 max_samples='auto',
+                 contamination='legacy_uod',
+                 max_features=1.,
+                 bootstrap=False,
+                 n_jobs=None,
+                 behaviour='old',
+                 random_state=None,
+                 verbose=0,
+                 warm_start=False):  # Add warm_start parameter
+        self.n_estimators = n_estimators
+        self.max_samples = max_samples
+        self.contamination = contamination
+        self.max_features = max_features
+        self.bootstrap = bootstrap
+        self.n_jobs = n_jobs
+        self.behaviour = behaviour
+        self.random_state = random_state
+def __init__(self,
+             n_estimators=100,
+             max_samples='auto',
+             contamination='legacy_uod',
+             max_features=1.,
+             bootstrap=False,
+             n_jobs=None,
+             behaviour='old',
+             random_state=None,
+             verbose=0,
+             warm_start=False):
+    self.n_estimators = n_estimators
+    self.max_samples = max_samples
+    self.contamination = contamination
+    self.max_features = max_features
+    self.bootstrap = bootstrap
+    self.n_jobs = n_jobs
+    self.behaviour = behaviour
+    self.random_state = random_state
+    self.verbose = verbose
+    self.warm_start = warm_start
+
+def fit(self, X, y=None):
+    """Fit estimator.
+
+    Parameters
+    ----------
+    X : {array-like, sparse matrix} of shape (n_samples, n_features)
+        The input samples. Use ``dtype=np.float32`` for maximum
+        efficiency.
+    y : Ignored
+        Not used, present for API consistency by convention.
+
+    Returns
+    -------
+    self : object
+        Fitted estimator.
+    """
+    # Fit method implementation...
+    pass
+
+def predict(self, X):
+    """Predict if a particular sample is an outlier or not.
+
+    Parameters
+    ----------
+    X : {array-like, sparse matrix} of shape (n_samples, n_features)
+        The input samples. Use ``dtype=np.float32`` for maximum
+        efficiency.
+
+    Returns
+    -------
+    is_inlier : array, shape (n_samples,)
+        For each observation, tells whether or not (+1 or -1) it should
+        be considered as an inlier according to the fitted model.
+    """
+    # Predict method implementation...
+    pass
+
+def decision_function(self, X):
+    """Average anomaly score of ``X``.
+
+    The anomaly score of an input sample is computed as
+    the mean anomaly score of the trees in the forest.
+
+    Parameters
+    ----------
+    X : {array-like, sparse matrix} of shape (n_samples, n_features)
+        The input samples. Use ``dtype=np.float32`` for maximum
+        efficiency.
+
+    Returns
+    -------
+    scores : ndarray of shape (n_samples,)
+        The anomaly score of the input samples.
+    """
+    # Decision function implementation...
+    pass
+
+
+
