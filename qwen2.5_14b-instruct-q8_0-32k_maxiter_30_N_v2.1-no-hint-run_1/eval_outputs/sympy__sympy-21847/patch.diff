diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..5c5a0fc71f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,8 @@
+import sympy as sp
+from sympy.polys.orderings import monomial_key
+x1, x2, x3 = sp.symbols('x1, x2, x3')
+states = [x1, x2, x3]
+max_degrees = 3
+min_degrees = 3
+monomials = sorted(sp.itermonomials(states, max_degrees, min_degrees=min_degrees), key=monomial_key('grlex', states))
+print(monomials)
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..39f6cbe787 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -98,51 +98,56 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 raise ValueError('Argument sizes do not match')
             if any(i < 0 for i in min_degrees):
                 raise ValueError("min_degrees can't contain negative numbers")
-        total_degree = False
+        
+        # Generate all combinations of exponents within the specified range
+        for exps in product(*[range(min_d, max_d + 1) for min_d, max_d in zip(min_degrees, max_degrees)]):
+            yield Tuple(*exps)
     else:
-        max_degree = max_degrees
-        if max_degree < 0:
-            raise ValueError("max_degrees can't be negative")
-        if min_degrees is None:
-            min_degree = 0
-        else:
-            if min_degrees < 0:
-                raise ValueError("min_degrees can't be negative")
-            min_degree = min_degrees
-        total_degree = True
-    if total_degree:
-        if min_degree > max_degree:
-            return
-        if not variables or max_degree == 0:
-            yield S.One
-            return
-        # Force to list in case of passed tuple or other incompatible collection
-        variables = list(variables) + [S.One]
-        if all(variable.is_commutative for variable in variables):
-            monomials_list_comm = []
-            for item in combinations_with_replacement(variables, max_degree):
-                powers = dict()
-                for variable in variables:
-                    powers[variable] = 0
-                for variable in item:
-                    if variable != 1:
-                        powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_comm.append(Mul(*item))
-            yield from set(monomials_list_comm)
-        else:
-            monomials_list_non_comm = []
-            for item in product(variables, repeat=max_degree):
-                powers = dict()
-                for variable in variables:
-                    powers[variable] = 0
-                for variable in item:
-                    if variable != 1:
-                        powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_non_comm.append(Mul(*item))
-            yield from set(monomials_list_non_comm)
+        if not isinstance(max_degrees, int):
+            raise TypeError('max_degrees must be an integer or a list')
+        
+        # Generate all combinations of exponents within the specified range
+        for exps in combinations_with_replacement(range(0, max_degrees + 1), n):
+            total_degree = sum(exps)
+            if min_degrees is None:
+                yield Tuple(*exps)
+            elif isinstance(min_degrees, int) and total_degree >= min_degrees:
+                yield Tuple(*exps)
+
+    # Continue with the original logic
+    if not variables or max_degrees == 0:
+        yield S.One
+        return
+
+    # Force to list in case of passed tuple or other incompatible collection
+    variables = list(variables) + [S.One]
+    
+    min_degree = 0 if min_degrees is None else min(min_degrees)
+    
+    if all(variable.is_commutative for variable in variables):
+        monomials_list_comm = []
+        for item in combinations_with_replacement(variables, max_degrees):
+            powers = dict()
+            for variable in variables:
+                powers[variable] = 0
+            for variable in item:
+                if variable != 1:
+                    powers[variable] += 1
+            if max(powers.values()) >= min_degree:
+                monomials_list_comm.append(Mul(*item))
+        yield from set(monomials_list_comm)
     else:
+        monomials_list_non_comm = []
+        for item in product(variables, repeat=max_degrees):
+            powers = dict()
+            for variable in variables:
+                powers[variable] = 0
+            for variable in item:
+                if variable != 1:
+                    powers[variable] += 1
+            monomials_list_non_comm.append(Mul(*item))
+        yield from set(monomials_list_non_comm)
+
         if any(min_degrees[i] > max_degrees[i] for i in range(n)):
             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')
         power_lists = []
@@ -634,3 +639,4 @@ def lcm(self, other):
                 "an instance of Monomial class expected, got %s" % other)
 
         return self.rebuild(monomial_lcm(self.exponents, exponents))
+
