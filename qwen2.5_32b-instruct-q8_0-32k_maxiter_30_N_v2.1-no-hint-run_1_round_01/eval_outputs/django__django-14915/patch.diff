diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 00c19e2c55..a0f82f37af 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -3,6 +3,9 @@ HTML Widget classes
 """
 
 import copy
+
+from django.forms.models import ModelChoiceIteratorValue
+
 import datetime
 import warnings
 from collections import defaultdict
@@ -617,25 +620,31 @@ class ChoiceWidget(Widget):
                 if subindex is not None:
                     subindex += 1
         return groups
+from django.forms.models import ModelChoiceIteratorValue
+
+def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
+    # Convert ModelChoiceIteratorValue to a string for hashability
+    if isinstance(value, ModelChoiceIteratorValue):
+        value = str(value)
+    
+    index = str(index) if subindex is None else "%s_%s" % (index, subindex)
+    option_attrs = self.build_attrs(self.attrs, attrs) if self.option_inherits_attrs else {}
+    if selected:
+        option_attrs.update(self.checked_attribute)
+    if 'id' in option_attrs:
+        option_attrs['id'] = self.id_for_label(option_attrs['id'], index)
+    return {
+        'name': name,
+        'value': value,
+        'label': label,
+        'selected': selected,
+        'index': index,
+        'attrs': option_attrs,
+        'type': self.input_type,
+        'template_name': self.option_template_name,
+        'wrap_label': True,
+    }
 
-    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
-        index = str(index) if subindex is None else "%s_%s" % (index, subindex)
-        option_attrs = self.build_attrs(self.attrs, attrs) if self.option_inherits_attrs else {}
-        if selected:
-            option_attrs.update(self.checked_attribute)
-        if 'id' in option_attrs:
-            option_attrs['id'] = self.id_for_label(option_attrs['id'], index)
-        return {
-            'name': name,
-            'value': value,
-            'label': label,
-            'selected': selected,
-            'index': index,
-            'attrs': option_attrs,
-            'type': self.input_type,
-            'template_name': self.option_template_name,
-            'wrap_label': True,
-        }
 
     def get_context(self, name, value, attrs):
         context = super().get_context(name, value, attrs)
@@ -1086,3 +1095,5 @@ class SelectDateWidget(Widget):
             ('{}_{}'.format(name, interval) in data)
             for interval in ('year', 'month', 'day')
         )
+
+
diff --git a/test_project/__init__.py b/test_project/__init__.py
new file mode 100644
index 0000000000..2319754e18
--- /dev/null
+++ b/test_project/__init__.py
@@ -0,0 +1 @@
+# This is a placeholder for the __init__.py file
diff --git a/test_project/forms.py b/test_project/forms.py
new file mode 100644
index 0000000000..769126b244
--- /dev/null
+++ b/test_project/forms.py
@@ -0,0 +1,23 @@
+from django import forms
+from .models import MyModel
+
+class CustomSelectWidget(forms.Select):
+    def __init__(self, show_fields=None, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.show_fields = show_fields or {}
+
+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
+        context = super().create_option(name, value, label, selected, index, subindex, attrs)
+        if not value:
+            return context
+        if value in self.show_fields:  # This is a dict {1: ['first_name', 'last_name']}
+            context['attrs']['data-fields'] = json.dumps(self.show_fields[value])
+        return context
+
+class MyModelForm(forms.ModelForm):
+    class Meta:
+        model = MyModel
+        fields = '__all__'
+        widgets = {
+            'value': CustomSelectWidget(show_fields={1: ['first_name', 'last_name'], 2: ['email']}),
+        }
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100755
index 0000000000..374f3b4e3c
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/test_project/models.py b/test_project/models.py
new file mode 100644
index 0000000000..8bca838887
--- /dev/null
+++ b/test_project/models.py
@@ -0,0 +1,5 @@
+from django.db import models
+
+class MyModel(models.Model):
+    name = models.CharField(max_length=255)
+    value = models.IntegerField()
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..028b193c95
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,63 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'your-secret-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
diff --git a/test_project/templates/form.html b/test_project/templates/form.html
new file mode 100644
index 0000000000..7bad8f9aea
--- /dev/null
+++ b/test_project/templates/form.html
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>My Model Form</title>
+</head>
+<body>
+    <form method="post">
+        {% csrf_token %}
+        {{ form.as_p }}
+        <button type="submit">Submit</button>
+    </form>
+</body>
+</html>
diff --git a/test_project/urls.py b/test_project/urls.py
new file mode 100644
index 0000000000..bbdd6a906a
--- /dev/null
+++ b/test_project/urls.py
@@ -0,0 +1,8 @@
+from django.contrib import admin
+from django.urls import path
+from .views import my_model_form_view
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('', my_model_form_view, name='my_model_form'),
+]
diff --git a/test_project/views.py b/test_project/views.py
new file mode 100644
index 0000000000..535b772b86
--- /dev/null
+++ b/test_project/views.py
@@ -0,0 +1,12 @@
+from django.shortcuts import render
+from .forms import MyModelForm
+
+def my_model_form_view(request):
+    if request.method == 'POST':
+        form = MyModelForm(request.POST)
+        if form.is_valid():
+            form.save()
+    else:
+        form = MyModelForm()
+
+    return render(request, 'form.html', {'form': form})
