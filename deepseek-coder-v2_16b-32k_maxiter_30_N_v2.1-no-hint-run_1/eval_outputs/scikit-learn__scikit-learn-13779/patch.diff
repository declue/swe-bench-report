diff --git a/sklearn/ensemble/_voting.py b/sklearn/ensemble/_voting.py
new file mode 100644
index 000000000..1c0c8d12d
--- /dev/null
+++ b/sklearn/ensemble/_voting.py
@@ -0,0 +1,26 @@
+import numpy as np
+from sklearn.base import BaseEstimator, ClassifierMixin
+from sklearn.utils.validation import check_array, check_is_fitted, column_or_1d
+
+class VotingClassifier(BaseEstimator, ClassifierMixin):
+    def fit(self, X, y, sample_weight=None):
+        # Check inputs
+        X = check_array(X)
+        y = column_or_1d(y)
+        
+        if sample_weight is not None:
+            sample_weight = np.asarray(sample_weight)
+        
+        estimators = list(self.estimators_)
+        for i, (name, est) in enumerate(estimators):
+            if est is not None:
+                est.fit(X, y, sample_weight=sample_weight)
+                self.estimators_[i] = (name, est)
+            else:
+                raise ValueError(f"Estimator {name} is None")
+        
+        # Fit the final estimator if there are any non-None estimators
+        if len([e for e in estimators if e[1] is not None]) > 0:
+            self._final_estimator.fit(X, y)
+        
+        return self
diff --git a/tests/test_voting_classifier.py b/tests/test_voting_classifier.py
new file mode 100644
index 000000000..23aed684b
--- /dev/null
+++ b/tests/test_voting_classifier.py
@@ -0,0 +1,20 @@
+import numpy as np
+from sklearn.datasets import load_iris
+from sklearn.ensemble import RandomForestClassifier, VotingClassifier
+from sklearn.linear_model import LogisticRegression
+
+# Load iris dataset
+X, y = load_iris(return_X_y=True)
+
+# Create a VotingClassifier with logistic regression and random forest estimators
+voter = VotingClassifier(
+    estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier())]
+)
+
+# Attempt to fit the model with sample weights, including a None estimator
+try:
+    voter.fit(X, y, sample_weight=np.ones(y.shape))
+    voter.set_params(lr=None)
+    voter.fit(X, y, sample_weight=np.ones(y.shape))
+except AttributeError as e:
+    print(f"AttributeError: {e}")
