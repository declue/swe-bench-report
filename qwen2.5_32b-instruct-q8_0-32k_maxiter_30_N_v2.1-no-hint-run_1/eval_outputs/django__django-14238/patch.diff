diff --git a/__init__.py b/__init__.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/__init__.py
@@ -0,0 +1 @@
+
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django/db/models/options.py b/django/db/models/options.py
index 4028e05b99..5cb6b1d3e8 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -8,6 +8,7 @@ from django.conf import settings
 from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured
 from django.db import connections
 from django.db.models import AutoField, Manager, OrderWrt, UniqueConstraint
+from django.db.models.fields import AutoField, BigAutoField, SmallAutoField
 from django.db.models.query_utils import PathInfo
 from django.utils.datastructures import ImmutableList, OrderedSet
 from django.utils.functional import cached_property
@@ -24,6 +25,27 @@ IMMUTABLE_WARNING = (
     "for your own use, make a copy first."
 )
 
+def _get_default_pk_class(self):
+    """
+    Returns the default primary key class for models that don't define a PK.
+    """
+    pk_class_path = self.default_auto_field or 'django.db.models.AutoField'
+    try:
+        # Allow subclasses of BigAutoField and SmallAutoField
+        pk_class = import_string(pk_class_path)
+        if not issubclass(pk_class, (AutoField, BigAutoField, SmallAutoField)):
+            raise ValueError(
+                "Primary key '%s' referred by DEFAULT_AUTO_FIELD must subclass AutoField."
+                % pk_class_path
+            )
+    except ImportError as e:
+        raise ImproperlyConfigured(
+            "'%s' doesn't look like a valid module path for a model field." % pk_class_path
+        ) from e
+
+    return pk_class
+
+
 DEFAULT_NAMES = (
     'verbose_name', 'verbose_name_plural', 'db_table', 'ordering',
     'unique_together', 'permissions', 'get_latest_by', 'order_with_respect_to',
@@ -235,18 +257,18 @@ class Options:
         if not pk_class_path:
             raise ImproperlyConfigured(f'{source} must not be empty.')
         try:
+            # Allow subclasses of BigAutoField and SmallAutoField
             pk_class = import_string(pk_class_path)
+            if not issubclass(pk_class, AutoField):
+                raise ValueError(
+                    "Primary key '%s' referred by DEFAULT_AUTO_FIELD must subclass AutoField."
+                    % pk_class_path
+                )
         except ImportError as e:
-            msg = (
-                f"{source} refers to the module '{pk_class_path}' that could "
-                f"not be imported."
-            )
-            raise ImproperlyConfigured(msg) from e
-        if not issubclass(pk_class, AutoField):
-            raise ValueError(
-                f"Primary key '{pk_class_path}' referred by {source} must "
-                f"subclass AutoField."
-            )
+            raise ImproperlyConfigured(
+                "'%s' doesn't look like a valid module path for a model field." % pk_class_path
+            ) from e
+
         return pk_class
 
     def _prepare(self, model):
@@ -893,3 +915,5 @@ class Options:
             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)
             if getattr(field, 'db_returning', False)
         ]
+
+
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..bc85bfff6b
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,16 @@
+#!/usr/bin/env python3
+
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bc8e770161
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    id = MyBigAutoField(primary_key=True)
diff --git a/reproduce_error/__init__.py b/reproduce_error/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_error/models.py b/reproduce_error/models.py
new file mode 100644
index 0000000000..bc8e770161
--- /dev/null
+++ b/reproduce_error/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    id = MyBigAutoField(primary_key=True)
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..1efa664035
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,65 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+SECRET_KEY = 'your-secret-key'
+DEBUG = True
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    # Add the app containing MyBigAutoField and MyModel
+    'reproduce_error',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+STATIC_URL = '/static/'
+
+DEFAULT_AUTO_FIELD = 'reproduce_error.models.MyBigAutoField'
+
diff --git a/urls.py b/urls.py
new file mode 100644
index 0000000000..dfc73621fa
--- /dev/null
+++ b/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/wsgi.py b/wsgi.py
new file mode 100644
index 0000000000..89bb14cd7e
--- /dev/null
+++ b/wsgi.py
@@ -0,0 +1,6 @@
+import os
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+
+application = get_wsgi_application()
